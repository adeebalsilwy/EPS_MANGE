using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.Data.Entity.Migrations;

namespace EPS.BL
{
    public partial class Pymnets : DevExpress.XtraEditors.XtraForm
    {
        private string valuePayment;

        DBEPSEntities db;
        TB_Pyments add;
        public int id;

        public Pymnets()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
        }

        private void LoadData()
        {
            id = Convert.ToInt32(lb_id.Text);
            EPS.DBEPSEntities dbContext = new EPS.DBEPSEntities();
            gridControl1.DataSource = dbContext.TB_Pyments.Where(x => x.IDSELL == id).ToList();
            SetPaymnetSum();
        }
        private void btn_payment_Click(object sender, EventArgs e)
        {
            try
            {
                var primerycurrname = Properties.Settings.Default.PrimaryCurrName;
                var paymnetsvalue = Convert.ToString(gridView1.GetFocusedRowCellValue("Paymentone"));
                var paymnetsvalue2 = Convert.ToString(gridView1.GetFocusedRowCellValue("CurrentPaymentone"));
                var paymentret = Convert.ToDouble(paymnetsvalue) - Convert.ToDouble(paymnetsvalue2);


                valuePayment = XtraInputBox.Show("اكتب المبلغ المراد دفعة في عملة " + "[" + primerycurrname + "],تذكر سيتم التسديد هنا وفي بيانات العميل ", "عمل دفعة", paymentret.ToString());




                if (valuePayment != null && Convert.ToDouble(valuePayment) <= Convert.ToDouble(paymentret))
                {
                    MakePayment();
                    LoadData();
                }
                else
                {
                    MessageBox.Show("يجب ان لا تكون قيمة الدفعة اكبر من المستحقة");
                }
            }
            catch { }
          
        }


        private void MakePayment()
        {


            try
            {
                db = new DBEPSEntities();
                add = new TB_Pyments();
                id = Convert.ToInt16(gridView1.GetFocusedRowCellValue("ID"));
                add = db.TB_Pyments.Where(x => x.ID == id).FirstOrDefault();

                if (id != 0)
                {

                    if (add.CurrentPaymentone == null)
                    {
                        add.CurrentPaymentone = 0;
                    }
                    add.CurrentPaymentone = add.CurrentPaymentone + Convert.ToDouble(valuePayment);
                    add.CurrentDate = DateTime.Now;
                    if (add.Paymentone <= add.CurrentPaymentone)
                    {
                        add.PaymentState = "نعم";

                    }
                    else if(add.CurrentPaymentone==0)
                    {
                        add.PaymentState = "لا";

                    }
                    else
                    {
                        add.PaymentState = "جزء";

                    }
                    TB_CustomerPaymentLogs logs = new TB_CustomerPaymentLogs
                    { 
                        SellID=add.IDSELL,
                        CustomerID=add.IDCustomer,
                        Pamnent=Convert.ToDouble( valuePayment),
                        Date=DateTime.Now
                    };
                    db.TB_CustomerPaymentLogs.Add(logs);

                    db.Entry(add).State = System.Data.Entity.EntityState.Modified;
                    // Save DataBase
                    db.SaveChanges();
                    toastNotificationsManager1.ShowNotification("f1449fe1-3838-416b-b71a-c50500f603ee");
                }
                else
                {
                    MessageBox.Show("لا يوجد بيانات , اختر صف لعمل الدفعة", "لا يمكن اجراء العملية", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }

            }
            catch
            {

            }
        }


       





        private void Pymnets_Load(object sender, EventArgs e)
        {
            LoadData();
            lb_id.Text = id.ToString();

           
        }
        private void SetPaymnetSum()
        {
            try
            {
                db = new DBEPSEntities();
                id = Convert.ToInt32(lb_id.Text);
                var listpayments1 = db.TB_Pyments.Where(x => x.IDSELL == id).Select(x => x.CurrentPaymentone).ToArray().Sum();
                var listpayments2 = db.TB_Pyments.Where(x => x.IDSELL == id).Select(x => x.Paymentone).ToArray().Sum();
                var credit = listpayments2 - listpayments1;
                lb_creditreq.Text = listpayments2.ToString();
                lb_creditpay.Text = listpayments1.ToString();
                lb_credit.Text = credit.ToString();
            }
            catch(Exception ex) { MessageBox.Show(ex.Message); }
        }

        private void btn_showdateofpayments_Click(object sender, EventArgs e)
        {
            try
            {
                id = Convert.ToInt32(lb_id.Text);
                db = new DBEPSEntities();
                FRM_PamymnetsLogs logs = new FRM_PamymnetsLogs();
                logs.Text = logs.Text + " - قائمة رقم " + lb_id.Text;
                logs.gridControl1.DataSource = db.TB_CustomerPaymentLogs.Where(x => x.SellID == id).ToList();
                logs.Show();
            }
            catch { }
          
        }
    }
}